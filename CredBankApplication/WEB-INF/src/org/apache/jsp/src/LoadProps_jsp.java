/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2023-09-25 07:11:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.src;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import com.scb.util.GlobalConstant;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.InputStream;
import java.util.Properties;
import com.scb.util.GlobalConstant;
import java.util.*;
import com.util.Logging;
import java.io.File;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import org.json.JSONObject;
import org.json.JSONException;
import java.util.Map;
import com.scb.ivr.spring.appcontext.SpringApplicationContext;
import com.scb.ivr.controller.ConfigController;
import org.json.JSONObject;
import com.genesyslab.studio.backendlogic.GVPHttpRequestProcessor;
import java.util.Map;

public final class LoadProps_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

// Implement this method to execute some server-side logic.
	public JSONObject performLogic(JSONObject state, Map<String, String> additionalParams) throws Exception {

		JSONObject result = new JSONObject();

		String sessionID = state.getString("GVPSessionID").split(";")[0];
		String callID = state.getString("CallUUID").trim();

		Date timeStamp = new Date();
		String className = new Object() {
		}.getClass().getEnclosingClass().getName();
		className = className.split("[.]")[4];
		String loggingCommonFormat = "{" + sessionID + "}," + callID + "," + className + ",";

		//Get ANI & DNIS
		String DNIS = state.getString("DNIS").trim();
		String ANI = state.getString("ANI").trim();
		Logger debugLogger = null;
		String LOG_DIRECTORY = null;
		String filepath = null;
		JSONObject appSession = new JSONObject();
		InputStream appInfoPropFile = null;
		Properties appInfoProps = new Properties();
		try {

			String envType = "DEV";
			System.setProperty("ENVTYPE", envType);

			String logLevel = null;
			String loggerName = sessionID;
			String PropFilePath = "D:/Subbu/config/IvrAppInfo.properties";
			String ucid = "0000" + new SimpleDateFormat("ddMMyyyyhhmmssss").format(new Date());
			String logPattern = null;
			String logFileBackupIndexString = null;
			try {
				//		if(envType!= null){
				//			appInfoPropFile =new FileInputStream(PropFilePath);
				//		} else {			
				//    		appInfoPropFile = new FileInputStream(PropFilePath);
				//    	}


				ConfigController controller = (ConfigController) SpringApplicationContext.getBean("configController");
				appInfoProps = (Properties) controller.getConfigFileValues("GCCP_BH_IVR_Config.properties");
				//   	appInfoProps.load(appInfoPropFile);
			System.setProperty("log4jpath", appInfoProps.getProperty("LOG4J_PATH").trim());
			System.setProperty("logxmlPath", appInfoProps.getProperty("LOGXML_PATH").trim());
				String logFileSizeString = appInfoProps.getProperty("LOG_FILE_SIZE").trim();
				int logFileSize = Integer.parseInt(logFileSizeString.trim());
				logFileBackupIndexString = appInfoProps.getProperty("LOG_FILE_BACKUPINDEX").trim();
				int logFileBackupIndex = Integer.parseInt(logFileBackupIndexString.trim());
				logPattern = appInfoProps.getProperty("LOG_PATTERN").trim();

				if (logLevel == null) {
					logLevel = appInfoProps.getProperty("LOG_LEVEL").trim();
				}

				LOG_DIRECTORY = appInfoProps.getProperty("DEV.LOG_DIRECTORY").trim();

				if (LOG_DIRECTORY.endsWith("/")) {
					filepath = LOG_DIRECTORY + loggerName + ".log";
				} else {
					filepath = LOG_DIRECTORY + "/" + loggerName + ".log";
				}
			} catch (Exception e) {
				System.out.println(e);
				int logFileSize = 20;
				int logFileBackupIndex = 50;
				LOG_DIRECTORY = "D:/Genesys/ElibraryLogs";
				logPattern = "%m%n";
				if (LOG_DIRECTORY.endsWith("/")) {
					filepath = LOG_DIRECTORY + loggerName + ".log";
				} else {
					filepath = LOG_DIRECTORY + "/" + loggerName + ".log";
				}
				logFileBackupIndexString = "50";
				logLevel = "debug";
			}


			debugLogger = Logging.LoggerConfiguration(sessionID);
			debugLogger.debug(loggingCommonFormat + "IVR CONFIG : " + appInfoProps);
			//System.out.println("Split "+new Object(){}.getClass().getEnclosingClass().getName().split("[.]")[4].toString());

			//		System.out.println("Currently running Java file: " + className);
			//	    debugLogger.debug(loggingCommonFormat + "cred card "+" 4123412341234123 ");
			//	    debugLogger.debug(loggingCommonFormat + "pin "+" 4123 ");

			//debugLogger = LogManager.getLogger(loggerName);	
			//		ConfigController controller = (ConfigController) SpringApplicationContext.getBean("configController");
			//		debugLogger.debug(loggingCommonFormat + "MENU JSON FROM CONFIG : "+controller.getConfigFileValues("menu.json"));
			//		Map<String, Map<String, String>> mapvalue=(Map<String, Map<String, String>>) controller.getConfigFileValues("menu.json");
			//		Map<String, String> map = (Map<String, String>)mapvalue.get("langMenu");
			//		debugLogger.debug(loggingCommonFormat + "MENU JSON FROM map : "+map);
			//		debugLogger.debug(loggingCommonFormat + map.get("PROMPTS"));
			//		debugLogger.debug(loggingCommonFormat + map.get("BARGEIN"));
			//		debugLogger.debug(loggingCommonFormat + map.get("GRAMMARS"));
			//		debugLogger.debug(loggingCommonFormat + map.get("MENU_DESC"));
			//		debugLogger.debug(loggingCommonFormat + map.get("NEXT_NODE"));
			//		debugLogger.debug(loggingCommonFormat + map.get("NI_PROMPT"));
			//		debugLogger.debug(loggingCommonFormat + map.get("NM_PROMPT"));
			//		debugLogger.debug(loggingCommonFormat + map.get("RETRY"));
			//		debugLogger.debug(loggingCommonFormat + map.get("STATE_ID"));
			//  	debugLogger.debug(loggingCommonFormat + map.get("MENU_TIMEOUT"));
			//		debugLogger.debug(loggingCommonFormat + map.get("MAXTRIES"));
			//		debugLogger.debug(loggingCommonFormat + map.get("MAXTRIES_NEXTNODE"));
			//		debugLogger.debug(loggingCommonFormat + map.get("INTENT"));
			//	    debugLogger.debug(loggingCommonFormat + "AppSession Starting value : "+ appSession);
			//		debugLogger.debug(loggingCommonFormat + "****************Init Properties Entry **************************");
			//		debugLogger.debug(loggingCommonFormat + "ANI: " + state.getString("ANI").trim());
			//	   	debugLogger.debug(loggingCommonFormat + "DNIS: " + state.getString("DNIS").trim());
			//	   	debugLogger.debug(loggingCommonFormat + "In Master CallFlow - InitProperties");
			//	   	debugLogger.debug(loggingCommonFormat + "envType from Websphere ENV : " + System.getProperty("ENVTYPE"));
			appSession.put("filepath", filepath);

			//Initialize appSession values
			appSession.put("TechnicalDifficulties", "");
			appSession.put("ANI", appInfoProps.getProperty("ANI"));
			appSession.put(GlobalConstant.MAX_RETRY_COUNT, 3);
			appSession.put("overallCounter", 0);
			appSession.put("eventName", "");
			appSession.put("loggerName", loggerName);
			appSession.put("logPattern", logPattern);
			appSession.put("logFileBackupIndexString", logFileBackupIndexString);
			appSession.put(GlobalConstant.MAX_RETRY_COUNT, 3);
			appSession.put("overallCounter", 0);
			appSession.put("ucid", ucid);
			appSession.put("isCustIden", "NO");
			appSession.put("subFlowStatus", "NA");
			appSession.put("otpAvailable", "NA");
			appSession.put("validotp", "NA");
			appSession.put("OTPAUTH", "NA");
			appSession.put("TPINAUTH", "NA");
			appSession.put("ErrorCode", "NA");
			appSession.put("CLI", appInfoProps.getProperty("ANI"));
			appSession.put("DNIS", DNIS);
			appSession.put("STARTTIME", new Date().getTime());
			appSession.put("ENDTIME", "NA");
			appSession.put(GlobalConstant.AUDIOLOCATION, state.getString("VOXFILEDIR") + "/en-US/");
			appSession.put("EXTENSION_WAVE", ".vox");
			appSession.put(GlobalConstant.LASTMENU, "NA");
			appSession.put(GlobalConstant.EXCEPTION, "NA");
			appSession.put("SESSION_ID", sessionID);
			appSession.put("OTP_DEST", "NA");
			appSession.put("cardHost", "NA");
			appSession.put("ACC_CARD_ID", "NA");
			appSession.put(GlobalConstant.ACCNUM, "NA");
			appSession.put("cardstatus", "NA");
			appSession.put("cardnum", "NA");
			appSession.put(GlobalConstant.SMSSENT, "NA");
			appSession.put("LASTMENU", "START");
			appSession.put("MENUTRAVERSE", "START");

			appSession.put("ERRORCOUNT", 0);
			appSession.put(GlobalConstant.SEGMENT, "NA");
			appSession.put(GlobalConstant.RELID, "NA");
			appSession.put(GlobalConstant.ISRMN, "N");
			appSession.put(GlobalConstant.LANGUAGECODE, "E");
			appSession.put(GlobalConstant.ONEFA, "TPIN|NA,OTP|NA");
			appSession.put(GlobalConstant.MOBILE, "NA");
			appSession.put(GlobalConstant.RMN, "NA");
			appSession.put(GlobalConstant.BANK_CARD_LOAN, "NA");
			appSession.put(GlobalConstant.TRANSFER_OR_DISCONNECT, "D");
			appSession.put(GlobalConstant.SEGMENTCODE, "NA");
			appSession.put(GlobalConstant.BLOCKCODE, "NA");
			appSession.put(GlobalConstant.LANGUAGE, "ENGLISH");
			appSession.put(GlobalConstant.CONTEXTID, "NA");
			appSession.put(GlobalConstant.TRANSATTRIBUTE, "NA");
			appSession.put(GlobalConstant.COUNTRY, "IN");
			appSession.put(GlobalConstant.ONEFA, appSession.getString("ONEFA"));
			appSession.put(GlobalConstant.TWOFA, "NA");
			appSession.put(GlobalConstant.VERIFIEDBY, "NA");
			appSession.put(GlobalConstant.IDENTIFIED_BY, "NA");
			appSession.put(GlobalConstant.CHANNEL, "IVR");
			appSession.put(GlobalConstant.INVOLUNTARYREASON, "NA");
			appSession.put(GlobalConstant.AGENTID, "NA");
			appSession.put(GlobalConstant.DISCONNECTREASON, "SUCCESS");
			appSession.put(GlobalConstant.MOBILE, "NA");
			appSession.put(GlobalConstant.MENUTRAVERSE, "START");
			debugLogger.debug(loggingCommonFormat + "AppSession End Value : " + appSession);

			debugLogger.debug(loggingCommonFormat + "****************Init Properties Exit **************************");
		} catch (Exception e) {
			System.out.println(e);
		}

		result.put("appSession", appSession);
		return result;

	};

/* public JSONObject performLogic(JSONObject state, Map<String, String> additionalParams)
{
    return new JSONObject();
} */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/src/../include/backend.jspf", Long.valueOf(1691499942000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.scb.ivr.spring.appcontext.SpringApplicationContext");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.util.Logging");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.io.FileNotFoundException");
    _jspx_imports_classes.add("org.json.JSONException");
    _jspx_imports_classes.add("org.apache.logging.log4j.Logger");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("com.scb.util.GlobalConstant");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.genesyslab.studio.backendlogic.GVPHttpRequestProcessor");
    _jspx_imports_classes.add("org.apache.logging.log4j.LogManager");
    _jspx_imports_classes.add("java.io.InputStream");
    _jspx_imports_classes.add("com.scb.ivr.controller.ConfigController");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write("\r\n\r\n\r\n\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

response.setHeader("Cache-Control", "no-cache");
/* response.addHeader("X-Frame-Options", "DENY"); */     // Setting the "DENY" Flag on response object to restrict browsers that support this header from allowing embedding web-pages in a frame

 /* Logger logger = BackendLogManager.getLogger("backEnd"); */
String output = null; 

try {
    // process the post data
    GVPHttpRequestProcessor processor = new GVPHttpRequestProcessor(request);
    processor.parseRequest();
    
    // "state" encapsulates the state variable submitted by the VXML page
    JSONObject state = processor.getState();
    
    // additional parameters that were passed in the namelist
    Map<String, String> additionalParams = processor.getAdditionalParams();
    
    // perform the logic
    JSONObject result = performLogic(state, additionalParams);
    
    output = result.toString();
    
    out.print(output);
    /* logger.info("Output: " + output); */
    
} catch (Exception e) {
    
    //Removed the call to 'e.printstacktrace()' as printing the stack trace of an exception is a bad practice.
    
    //String msg = e.getMessage();
    //if (null != msg){
    //    msg = msg.replace('"', '\'');
    //}
    
     e.printStackTrace();
        String msg = e.getMessage();
        if (null != msg){
            msg = msg.replace('"', '\'');
        }
    out.print("An error has occured in the custom backend JSP file");
    /* logger.error("An error has occured in the custom backend JSP file"); */
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
